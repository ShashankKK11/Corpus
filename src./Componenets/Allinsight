import React, { useState } from 'react';
import { Brain, TrendingUp, Target, AlertTriangle, Lightbulb, FileText, Users, Mail, BarChart3, RefreshCw as Refresh, Download, Filter, Search } from 'lucide-react';
import { useApp } from '../contexts/AppContext';

const AIInsights: React.FC = () => {
  const { insights, documents, contacts, campaigns } = useApp();
  const [xselectedType, setSelectedType] = useState('all');
  const [searchTerm, setSearchTerm] = useState('');

  const insightTypes = ['all', 'trend', 'opportunity', 'risk', 'suggestion'];
  
  const filteredInsights = insights.filter(insight => {
    const matchesType = selectedType === 'all' || insight.type === selectedType;
    const matchesSearch = insight.title.toLowerCase().includes(searchTerm.toLowerCase()) ||
                         insight.description.toLowerCase().includes(searchTerm.toLowerCase());
    return matchesType && matchesSearch;
  });

  const getInsightIcon = (type: string) => {
    switch (type) {
      case 'trend':
        return <TrendingUp className="h-5 w-5 text-blue-600" />;
      case 'opportunity':
        return <Target className="h-5 w-5 text-green-600" />;
      case 'risk':
        return <AlertTriangle className="h-5 w-5 text-red-600" />;
      case 'suggestion':
        return <Lightbulb className="h-5 w-5 text-yellow-600" />;
      default:
        return <Brain className="h-5 w-5 text-purple-600" />;
    }
  };

  const getInsightColor = (type: string) => {
    switch (type) {
      case 'trend':
        return 'border-blue-200 bg-blue-50';
      case 'opportunity':
        return 'border-green-200 bg-green-50';
      case 'risk':
        return 'border-red-200 bg-red-50';
      case 'suggestion':
        return 'border-yellow-200 bg-yellow-50';
      default:
        return 'border-purple-200 bg-purple-50';
    }
  };

  const confidenceColor = (confidence: number) => {
    if (confidence >= 0.8) return 'text-green-600 bg-green-100';
    if (confidence >= 0.6) return 'text-yellow-600 bg-yellow-100';
    return 'text-red-600 bg-red-100';
  };

  // Sample AI-generated insights
  const aiMetrics = [
    {
      title: 'Document Processing',
      value: documents.length,
      trend: '+12%',
      description: 'Documents analyzed this month',
      icon: FileText
    },
    {
      title: 'Contact Scoring',
      value: contacts.filter(c => c.tags.includes('high-value')).length,
      trend: '+23%',
      description: 'High-value contacts identified',
      icon: Users
    },
    {
      title: 'Campaign Optimization',
      value: campaigns.filter(c => c.status === 'active').length,
      trend: '+8%',
      description: 'Active optimized campaigns',
      icon: Mail
    },
    {
      title: 'Response Prediction',
      value: '87%',
      trend: '+5%',
      description: 'Average prediction accuracy',
      icon: BarChart3
    }
  ];

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">AI Insights</h1>
          <p className="text-gray-600 mt-1">AI-powered analysis and recommendations for your outreach</p>
        </div>
        <div className="flex space-x-3">
          <button className="px-4 py-2 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center space-x-2">
            <Refresh className="h-4 w-4" />
            <span>Refresh Analysis</span>
          </button>
          <button className="px-4 py-2 bg-gradient-to-r from-blue-600 to-teal-600 text-white rounded-lg hover:shadow-lg transition-all flex items-center space-x-2">
            <Download className="h-4 w-4" />
            <span>Export Report</span>
          </button>
        </div>
      </div>

      {/* AI Metrics Overview */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
        {aiMetrics.map((metric, index) => {
          const Icon = metric.icon;
          return (
            <div key={index} className="bg-white rounded-xl shadow-sm border border-gray-200 p-6 hover:shadow-md transition-shadow">
              <div className="flex items-center justify-between mb-4">
                <div className="p-3 bg-purple-100 rounded-lg">
                  <Icon className="h-6 w-6 text-purple-600" />
                </div>
                <span className="text-sm text-green-600 font-medium">{metric.trend}</span>
              </div>
              <div className="text-2xl font-bold text-gray-900 mb-1">{metric.value}</div>
              <div className="text-sm text-gray-600">{metric.description}</div>
            </div>
          );
        })}
      </div>

      {/* Search and Filters */}
      <div className="flex flex-col sm:flex-row gap-4">
        <div className="flex-1 relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
          <input
            type="text"
            placeholder="Search insights..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          />
        </div>
        <div className="flex space-x-3">
          <select
            value={selectedType}
            onChange={(e) => setSelectedType(e.target.value)}
            className="px-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
          >
            {insightTypes.map(type => (
              <option key={type} value={type}>
                {type === 'all' ? 'All Types' : type.charAt(0).toUpperCase() + type.slice(1)}
              </option>
            ))}
          </select>
          <button className="px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors flex items-center space-x-2">
            <Filter className="h-4 w-4" />
            <span>Filter</span>
          </button>
        </div>
      </div>

      {/* Insights List */}
      <div className="space-y-4">
        {filteredInsights.map((insight) => (
          <div key={insight.id} className={`rounded-xl border p-6 hover:shadow-md transition-shadow ${getInsightColor(insight.type)}`}>
            <div className="flex items-start justify-between mb-4">
              <div className="flex items-center space-x-3">
                <div className="p-2 bg-white rounded-lg shadow-sm">
                  {getInsightIcon(insight.type)}
                </div>
                <div>
                  <h3 className="text-lg font-semibold text-gray-900">{insight.title}</h3>
                  <div className="flex items-center space-x-3 mt-1">
                    <span className="text-sm text-gray-600 capitalize">{insight.type}</span>
                    <span className={`px-2 py-1 rounded-full text-xs font-medium ${confidenceColor(insight.confidence)}`}>
                      {Math.round(insight.confidence * 100)}% confidence
                    </span>
                    <span className="text-sm text-gray-500">{insight.createdDate}</span>
                  </div>
                </div>
              </div>
            </div>

            <p className="text-gray-700 mb-4 leading-relaxed">{insight.description}</p>

            {insight.relatedDocuments.length > 0 && (
              <div className="flex items-center space-x-2 mb-4">
                <FileText className="h-4 w-4 text-gray-400" />
                <span className="text-sm text-gray-600">
                  Based on {insight.relatedDocuments.length} document{insight.relatedDocuments.length !== 1 ? 's' : ''}
                </span>
              </div>
            )}

            <div className="flex items-center justify-between">
              <div className="flex space-x-2">
                <button className="px-3 py-1 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm">
                  View Details
                </button>
                <button className="px-3 py-1 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-sm">
                  Apply Suggestion
                </button>
              </div>
              <button className="text-gray-400 hover:text-gray-600 transition-colors">
                <Download className="h-4 w-4" />
              </button>
            </div>
          </div>
        ))}
      </div>

      {filteredInsights.length === 0 && (
        <div className="text-center py-12">
          <Brain className="h-12 w-12 text-gray-400 mx-auto mb-4" />
          <h3 className="text-lg font-medium text-gray-900 mb-2">No insights found</h3>
          <p className="text-gray-600 mb-4">
            {searchTerm || selectedType !== 'all' 
              ? 'Try adjusting your search or filters'
              : 'Upload more documents and add contacts to generate AI insights'
            }
          </p>
          <button className="px-6 py-2 bg-gradient-to-r from-blue-600 to-teal-600 text-white rounded-lg hover:shadow-lg transition-all">
            Generate New Insights
          </button>
        </div>
      )}

      {/* AI Analysis Summary */}
      <div className="bg-gradient-to-r from-purple-50 to-blue-50 rounded-xl p-6 border border-purple-200">
        <div className="flex items-center space-x-3 mb-4">
          <Brain className="h-6 w-6 text-purple-600" />
          <h2 className="text-lg font-semibold text-gray-900">AI Analysis Summary</h2>
        </div>
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="text-center">
            <div className="text-2xl font-bold text-purple-600">{insights.length}</div>
            <div className="text-sm text-gray-600">Total Insights Generated</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-green-600">
              {insights.filter(i => i.confidence >= 0.8).length}
            </div>
            <div className="text-sm text-gray-600">High Confidence Insights</div>
          </div>
          <div className="text-center">
            <div className="text-2xl font-bold text-blue-600">
              {insights.filter(i => i.type === 'opportunity').length}
            </div>
            <div className="text-sm text-gray-600">Opportunities Identified</div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default AIInsights;
